version: '3.3'

services:
  # Zookeeper server for kafka 
  zoo1:
    image: zookeeper:3.4.9
    restart: unless-stopped
    hostname: zoo1
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zoo1:2888:3888

  # Kafka service
  kafka1:
    image: confluentinc/cp-kafka:5.2.1
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zoo1

  notification-service-server:
    image: notification-service-server:latest
    container_name: pv217-notification-service-server
    hostname: notification-service-server
    environment:
    - KAFKA_HOST=kafka1:9092
    - SHOW_FULL_MESSAGE=true
    ports:
    - "8080:8080"
    depends_on: 
    - kafka1

  # Hardcoded two services - could be more dynamic with k8s 
  notification-service-client-1:
    image: notification-service-client:latest
    container_name: pv217-notification-service-client-1
    environment:
    - KAFKA_HOST=kafka1:9092
    - WEB_SOCKET=notification-service-server:8080
    - SHOW_FULL_MESSAGE=true
    # Waiting 3 seconds for simplicity - could be done better by checking the ws port or by healthchecks (or by many other solutions :D)
    command: bash -c "sleep 3; node /notification-service-client/scripts/init-cli-client.js"
    depends_on: 
    - kafka1
    - archiverdb
    - data-generator-cz-sk
    - data-generator-cz-de
    - data-archiver
    - data-collector

  notification-service-client-2:
    image: notification-service-client:latest
    container_name: pv217-notification-service-client-2
    environment:
    - KAFKA_HOST=kafka1:9092
    - WEB_SOCKET=notification-service-server:8080
    - SHOW_FULL_MESSAGE=true
    # Waiting 3 seconds for simplicity - could be done better by checking the ws port or by healthchecks (or by many other solutions :D)
    command: bash -c "sleep 3; node /notification-service-client/scripts/init-cli-client.js"
    depends_on: 
    - kafka1
    - archiverdb
    - data-generator-cz-sk
    - data-generator-cz-de
    - data-archiver
    - data-collector
    
  data-generator-cz-sk:
    image: data-generator:latest
    container_name: pv217-generator-cz-sk
    environment:
      - 'mp.messaging.connector.smallrye-kafka.bootstrap.servers=kafka1:9092'
      - 'core.generating.running=true'
      - 'controlcenter.id=CC-BORDER-CZ/SK'
      - 'measurement.freq.mean=60'
      - 'measurement.freq.dev=5'
      - 'measurement.freq.err=0.2'
      - 'measurement.mw.mean=100'
      - 'measurement.mw.dev=100'
      - 'measurement.mw.err=0.01'
      - 'measurement.temperfahr.mean=77'
      - 'measurement.temperfahr.dev=10'
      - 'measurement.temperfahr.err=0.05'
    ports:
      - 9080:8080
    depends_on:
      - kafka1
      
  data-generator-cz-de:
    image: data-generator:latest
    container_name: pv217-generator-cz-de
    environment:
      - 'mp.messaging.connector.smallrye-kafka.bootstrap.servers=kafka1:9092'
      - 'core.generating.running=true'
      - 'controlcenter.id=CC-BORDER-CZ/DE'
      - 'measurement.freq.mean=60'
      - 'measurement.freq.dev=5'
      - 'measurement.freq.err=0.2'
      - 'measurement.mw.mean=400'
      - 'measurement.mw.dev=100'
      - 'measurement.mw.err=0.005'
      - 'measurement.temperfahr.mean=90'
      - 'measurement.temperfahr.dev=10'
      - 'measurement.temperfahr.err=0.05'
    ports:
      - 9081:8080
    depends_on:
      - kafka1
  
  data-collector:
    image: data-collector:latest
    container_name: pv217-collector
    environment:
      - 'mp.messaging.connector.smallrye-kafka.bootstrap.servers=kafka1:9092'
    ports:
      - 8280:8080
    depends_on:
      - kafka1
      
  archiverdb:
    image: postgres
    container_name: pv217-archiver-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: archiver
      POSTGRES_PASSWORD: pass
    ports:
      - "6543:5432"
      
  data-archiver:
    image: data-archiver:latest
    container_name: pv217-archiver
    environment:
      - 'mp.messaging.connector.smallrye-kafka.bootstrap.servers=kafka1:9092'
      - 'quarkus.datasource.jdbc.url=jdbc:postgresql://pv217-archiver-db:5432/archiver'
      - 'archiveService.simulatedExceptionRatePercent=20'
    ports:
      - 8180:8080
    depends_on:
      - kafka1

  data-analyzer:
    image: data-analyzer:latest
    container_name: pv217-analyzer
    environment:
      - 'mp.messaging.connector.smallrye-kafka.bootstrap.servers=kafka1:9092'
      - 'com.nabiyev.pv217.iotservices.dataanalyzer.client.ArchiverRestClient/mp-rest/url=http://pv217-archiver:8080/'
      - 'quarkus.log.category."com.nabiyev".level=DEBUG'
    ports:
      - 8380:8080
    depends_on:
      - kafka1
    

